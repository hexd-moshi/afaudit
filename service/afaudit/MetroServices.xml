<?xml version="1.0" encoding="UTF-8"?>
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-2.0.xsd">

    <service verb="fill" noun="Checklist">
        <in-parameters>
            <parameter name="serveLineStoreId" required="true"/>
            <parameter name="viewAuditedCheckItem" type="Map" required="true"/>
            <parameter name="viewServeLineStore" type="Map" required="true"/>
            <parameter name="viewAuditedCheckItemList" type="List" required="true"/>
            <parameter name="attachment" type="Map" required="true"/>
            <parameter name="viewRoundInServeList" type="List" required="true"/>
        </in-parameters>

        <actions>
            <if condition="viewServeLineStore.serveType + viewServeLineStore.checklistVersion == 'HQ1'">
                <service-call name="afaudit.MetroServices.get#HQ1" in-map="[serveLineStoreId:serveLineStoreId, viewAuditedCheckItem:viewAuditedCheckItem,
                viewServeLineStore:viewServeLineStore, viewAuditedCheckItemList:viewAuditedCheckItemList, attachment:attachment, viewRoundInServeList:viewRoundInServeList]"/>
                <return/>
            </if>

            <service-call name="afaudit.MetroServices.get#HQ1" in-map="[serveLineStoreId:serveLineStoreId, viewAuditedCheckItem:viewAuditedCheckItem,
                viewServeLineStore:viewServeLineStore, viewAuditedCheckItemList:viewAuditedCheckItemList, attachment:attachment, viewRoundInServeList:viewRoundInServeList]"/>
        </actions>
    </service>

    <service verb="get" noun="HQ1">
        <in-parameters>
            <parameter name="serveLineStoreId" required="true"/>
            <parameter name="viewAuditedCheckItem" type="Map" required="true"/>
            <parameter name="viewServeLineStore" type="Map" required="true"/>
            <parameter name="viewAuditedCheckItemList" type="List" required="true"/>
            <parameter name="attachment" type="Map" required="true"/>
            <parameter name="viewRoundInServeList" type="List" required="true"/>
        </in-parameters>

        <actions>
            <entity-find entity-name="afaudit.Attachment" list="attachmentList">
                <econdition field-name="attachmentType" value="ServeLineStore-AuditConfirm"/>
                <econdition field-name="dataId" from="serveLineStoreId"/>
                <order-by field-name="attachmentId"/>
            </entity-find>
            <entity-find entity-name="afaudit.ViewCheckItemAttachment" list="checkItemAttachmentList">
                <econdition field-name="serveLineStoreId" from="serveLineStoreId"/>
                <order-by field-name="dataId"/>
            </entity-find>

            <script><![CDATA[
                import org.moqui.resource.ResourceReference
                import org.moqui.util.StringUtilities
                import org.apache.poi.xssf.usermodel.XSSFRow
                import org.apache.poi.xssf.usermodel.XSSFSheet
                import org.apache.poi.xssf.usermodel.XSSFWorkbook
                import org.apache.poi.openxml4j.opc.OPCPackage
                import org.apache.poi.ss.usermodel.ClientAnchor;
                import org.apache.poi.ss.usermodel.CreationHelper;
                import org.apache.poi.ss.usermodel.Drawing;
                import org.apache.poi.ss.usermodel.Picture;

                org.moqui.context.ExecutionContext ec = context.ec

                ResourceReference newRr = ec.resource.getLocationReference(attachment.attachmentLocation)
                InputStream resourceInputStream = newRr.openStream()

                OPCPackage fs = OPCPackage.open(resourceInputStream)
                XSSFWorkbook wb = new XSSFWorkbook(fs)

                HashMap map; Iterator it; HashMap mapRound; XSSFSheet sheet; XSSFRow row;
                int beginRow; int beginCol; int itemNoCol; int actionCol; int beginXRow; int beginNARow;

                sheet = wb.getSheet("Audit Summary")
                sheet.getRow(3).getCell(3).setCellValue(viewServeLineStore.storeName)
                sheet.getRow(5).getCell(3).setCellValue(viewServeLineStore.auditDate)
                sheet.getRow(6).getCell(3).setCellValue(viewServeLineStore.auditor)
                sheet.getRow(7).getCell(3).setCellValue(viewServeLineStore.storeManager)

                beginCol = 4;
                mapRound = new HashMap();
                it = viewRoundInServeList.iterator();
                while(it.hasNext()){
                    map = it.next()

                    if(map.get("serveLineStoreId")){
                        mapRound.put(map.get("serveLineStoreId"), beginCol)
                        sheet.getRow(3).getCell(beginCol+3).setCellValue(map.get("auditDate"))
                    }
                    beginCol = beginCol + 1
                }
                sheet.getRow(13).getCell(3).setCellValue(mapRound.get(viewServeLineStore.serveLineStoreId)-3)
                sheet.setForceFormulaRecalculation(true);

                sheet = wb.getSheet("Result Summary")
                sheet.getRow(5).getCell(0).setCellValue(viewServeLineStore.comment)
                beginCol = 7
                Iterator itAttachment = attachmentList.iterator()
                while(itAttachment.hasNext()){
                    HashMap mapAttachment =  itAttachment.next()

                    sheet.setColumnWidth(beginCol, 8000);

                    newRr = ec.resource.getLocationReference(mapAttachment.get("attachmentLocation"))
                    InputStream is = newRr.openStream()

                    byte[] bytes = org.apache.commons.io.IOUtils.toByteArray(is);
                    int pictureIdx = wb.addPicture(bytes, XSSFWorkbook.PICTURE_TYPE_JPEG);
                    is.close();

                    CreationHelper helper = wb.getCreationHelper();
                    Drawing drawing = sheet.createDrawingPatriarch();
                    ClientAnchor anchor = helper.createClientAnchor();
                    anchor.setCol1(beginCol++);
                    anchor.setRow1(5);
                    Picture pict = drawing.createPicture(anchor, pictureIdx);
                    pict.resize(1);
                }

                beginXRow = 8; beginNARow = 10;
                it = viewAuditedCheckItemList.iterator()
                while(it.hasNext()){
                    map = it.next()

                    sheet = wb.getSheet(map.get("checkGroup"))
                    beginRow = 10; itemNoCol = 1; actionCol = 10;
                    for(int rownum = beginRow; rownum <= sheet.getLastRowNum(); rownum++){
                        row = sheet.getRow(rownum);

                        if(row.getCell(itemNoCol).getStringCellValue().equals(map.get("itemNo"))){
                            row.getCell(mapRound.get(map.get("serveLineStoreId"))).setCellValue(map.get("field08"))

                            if(viewServeLineStore.serveLineStoreId == map.get("serveLineStoreId")){
                                row.getCell(actionCol).setCellValue(map.get("defectRemark"))
                            }
                            break;
                        }
                    }

                    if(viewServeLineStore.serveLineStoreId != map.get("serveLineStoreId")){
                        continue;
                    }

                    sheet = wb.getSheet("Result Summary")
                    if(map.get("field08") == "X"){
                        sheet.shiftRows(beginXRow, sheet.getLastRowNum(), 1);
                        row = sheet.createRow(beginXRow);

                        HashMap mapAttachment; beginCol = 6;
                        itAttachment = checkItemAttachmentList.iterator()
                        while(itAttachment.hasNext()){
                            mapAttachment = itAttachment.next()

                            if(mapAttachment.get("serveLineStoreCheckItemId")==map.get("serveLineStoreCheckItemId")){
                                sheet.setColumnWidth(beginCol, 8000);
                                sheet.getRow(beginXRow).setHeightInPoints(180 * 0.75);

                                newRr = ec.resource.getLocationReference(mapAttachment.get("attachmentLocation"))
                                InputStream is = newRr.openStream()

                                byte[] bytes = org.apache.commons.io.IOUtils.toByteArray(is);
                                int pictureIdx = wb.addPicture(bytes, XSSFWorkbook.PICTURE_TYPE_JPEG);
                                is.close();

                                CreationHelper helper = wb.getCreationHelper();
                                Drawing drawing = sheet.createDrawingPatriarch();
                                ClientAnchor anchor = helper.createClientAnchor();
                                anchor.setCol1(beginCol++);
                                anchor.setRow1(beginXRow);
                                Picture pict = drawing.createPicture(anchor, pictureIdx);
                                pict.resize(1);
                            }
                        }

                        beginXRow++;
                    }else if(map.get("field08") == "N/A"){
                        //sheet.shiftRows(beginNARow, sheet.getLastRowNum(), 1);
                        row = sheet.createRow(beginNARow);
                    }
                    beginNARow++;

                    row.createCell(0).setCellValue(map.get("checkGroup"))
                    row.createCell(1).setCellValue(map.get("itemNo"))
                    row.createCell(2).setCellValue(map.get("checkLevel"))
                    row.createCell(3).setCellValue(mapRound.get(viewServeLineStore.serveLineStoreId)-3)
                    row.createCell(4).setCellValue(map.get("defectRemark"))
                }

                ByteArrayOutputStream bos = new ByteArrayOutputStream();
                wb.write(bos)
                resourceInputStream.close()
                ByteArrayInputStream bis = new ByteArrayInputStream(bos.toByteArray());

                String fileName = "Checklist_" + viewServeLineStore.shortName + "_" + viewServeLineStore.storeName + "_" + viewServeLineStore.auditDate + "(" + serveLineStoreId + ")" + ".xlsx"
                String attachmentType = "ServeLineStore-Checklist"
                String attachmentLocation = "dbresource://afauditApp/attachment/${attachmentType}/${serveLineStoreId}/${fileName}"
                String attachmentUrl = ec.web.getWebappRootUrl(true, null) + "/apps/afauditApp/rest/attachment/${attachmentType}/${serveLineStoreId}/${fileName}"

                newRr = ec.resource.getLocationReference(attachmentLocation)
                newRr.putStream(bis)
                bos.close()
                bis.close()

                ec.service.sync().name("create", "afaudit.Attachment").parameters([attachmentType: attachmentType, dataId: serveLineStoreId, attachmentLocation: attachmentLocation, attachmentUrl: attachmentUrl]).call()

            ]]></script>
        </actions>
    </service>
</services>
