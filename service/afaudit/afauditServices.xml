<?xml version="1.0" encoding="UTF-8"?>
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-2.0.xsd">

    <service verb="fill" noun="Summary">
        <in-parameters>
            <parameter name="serveLineStoreId"/>
            <parameter name="viewServeLineStore" type="Map"/>
            <parameter name="viewAuditCheckItemList" type="List"/>
            <parameter name="attachmentList" type="List"/>
            <parameter name="checkItemAttachmentList" type="List"/>
        </in-parameters>

        <actions>
            <!--update Summary template and output-->
            <script><![CDATA[
                import org.moqui.resource.ResourceReference
                import org.apache.poi.hssf.usermodel.HSSFRow
                import org.apache.poi.hssf.usermodel.HSSFSheet
                import org.apache.poi.hssf.usermodel.HSSFWorkbook
                import org.apache.poi.poifs.filesystem.POIFSFileSystem
                import org.apache.poi.ss.usermodel.ClientAnchor;
                import org.apache.poi.ss.usermodel.CreationHelper;
                import org.apache.poi.ss.usermodel.Drawing;
                import org.apache.poi.ss.usermodel.Picture;

                org.moqui.context.ExecutionContext ec = context.ec

                String filePath = "runtime/component/afaudit/screen/afauditAdmin/ServeLineStore/templateSummary.xls"

                File file = new File(filePath)
                if(!file.exists()){
                    String path = this.getClass().getResource("").getPath();
                    filePath = path.substring(0, path.indexOf("/WEB-INF/")) + "/" + filePath
                }

                InputStream resourceInputStream = new FileInputStream(filePath)

                POIFSFileSystem fs = new POIFSFileSystem(resourceInputStream)
                HSSFWorkbook wb = new HSSFWorkbook(fs)

                HashMap map; HSSFSheet sheet; HSSFRow row;
                int beginRow; int beginCol; String operation; String checkGroup; String itemNo;

                sheet = wb.getSheet("Summary")

                beginRow = 1;
                Iterator it = viewAuditCheckItemList.iterator()
                while(it.hasNext()){
                    map = it.next()

                    if(map.get("checkGroup")!=checkGroup || map.get("itemNo")!=itemNo){
                        checkGroup = map.get("checkGroup")
                        itemNo = map.get("itemNo")

                        row = sheet.createRow(beginRow)

                        row.createCell(0).setCellValue(map.get("checkGroup"))
                        row.createCell(1).setCellValue(map.get("checkType"))
                        row.createCell(2).setCellValue(map.get("itemNo"))
                        row.createCell(3).setCellValue(map.get("defect"))

                        if(map.get("operation").equals("Self-Operation")){
                            operation = " [Self]"
                            row.createCell(4).setCellValue(map.get("defect")); row.createCell(5)}
                        else{
                            operation = " [Joint]"
                            row.createCell(4); row.createCell(5).setCellValue(map.get("defect"))
                            row.createCell(6).setCellValue(map.get("provider"))
                        }

                        if(map.get("defectRemark")){row.createCell(7).setCellValue(map.get("defectRemark") + operation)}else{row.createCell(7)}
                        if(map.get("actionRemark")){row.createCell(8).setCellValue(map.get("actionRemark") + operation)}else{row.createCell(8)}

                        row.createCell(9).setCellValue(map.get("field05"))
                        row.createCell(10).setCellValue(map.get("field06"))
                        row.createCell(11).setCellValue(map.get("field03"))
                        row.createCell(12).setCellValue(map.get("field04"))

                        HashMap mapAttachment; beginCol = 13;
                        Iterator itAttachment = checkItemAttachmentList.iterator()
                        while(itAttachment.hasNext()){
                            mapAttachment = itAttachment.next()

                            if(mapAttachment.get("checkGroup")==checkGroup && mapAttachment.get("itemNo")==itemNo){
                                ResourceReference newRr = ec.resource.getLocationReference(mapAttachment.get("attachmentLocation"))
                                InputStream is = newRr.openStream()

                                byte[] bytes = org.apache.commons.io.IOUtils.toByteArray(is);
                                int pictureIdx = wb.addPicture(bytes, HSSFWorkbook.PICTURE_TYPE_JPEG);
                                is.close();

                                CreationHelper helper = wb.getCreationHelper();
                                Drawing drawing = sheet.createDrawingPatriarch();
                                ClientAnchor anchor = helper.createClientAnchor();
                                anchor.setCol1(beginCol++);
                                anchor.setRow1(beginRow);
                                Picture pict = drawing.createPicture(anchor, pictureIdx);
                                pict.resize();
                            }
                        }
                        beginRow++
                    }else{
                        row.getCell(3).setCellValue(row.getCell(3).getNumericCellValue() + map.get("defect"))
                        if(map.get("operation").equals("Self-Operation")){
                            operation = " [Self]"
                            row.getCell(4).setCellValue(row.getCell(4).getNumericCellValue() + map.get("defect"))}
                        else{
                            operation = " [Joint]"
                            row.getCell(5).setCellValue(row.getCell(5).getNumericCellValue() + map.get("defect"))}

                        String val0 = row.getCell(6)?row.getCell(6).getStringCellValue():""; if(val0){val0 = val0 + ";\r\n"}
                        if(map.get("provider")){
                            row.getCell(6).setCellValue(val0 + map.get("provider"))
                        }
                        String val1 = row.getCell(7)?row.getCell(7).getStringCellValue():""; if(val1){val1 = val1 + ";\r\n"}
                        if(map.get("defectRemark")){
                            row.getCell(7).setCellValue(val1 + map.get("defectRemark") + operation)
                        }
                        String val2 = row.getCell(8)?row.getCell(8).getStringCellValue():""; if(val2){val2 = val2 + ";\r\n"}
                        if(map.get("actionRemark")){
                            row.getCell(8).setCellValue(val2 + map.get("actionRemark") + operation)
                        }
                        String val3 = row.getCell(9)?row.getCell(9).getStringCellValue():""; if(val3){val3 = val3 + ";\r\n"}
                        if(map.get("field05")){
                            row.getCell(9).setCellValue(val3 + map.get("field05"))
                        }
                        String val4 = row.getCell(10)?row.getCell(10).getStringCellValue():""; if(val4){val4 = val4 + ";\r\n"}
                        if(map.get("field06")){
                            row.getCell(10).setCellValue(val4 + map.get("field06"))
                        }
                        String val5 = row.getCell(11)?row.getCell(11).getStringCellValue():""; if(val5){val5 = val5 + ";\r\n"}
                        if(map.get("field03")){
                            row.getCell(11).setCellValue(val5 + map.get("field03"))
                        }
                        String val6 = row.getCell(12)?row.getCell(12).getStringCellValue():""; if(val6){val6 = val6 + ";\r\n"}
                        if(map.get("field04")){
                            row.getCell(12).setCellValue(val6 + map.get("field04"))
                        }
                    }
                }

                beginRow++
                row = sheet.createRow(beginRow++)
                row.createCell(0).setCellValue("审核建议")
                row.createCell(1).setCellValue("确认单照片")

                row = sheet.createRow(beginRow)
                row.createCell(0).setCellValue(viewServeLineStore.get("comment"))

                beginCol = 1;
                it = attachmentList.iterator()
                while(it.hasNext()){
                    map = it.next()

                    ResourceReference newRr = ec.resource.getLocationReference(map.get("attachmentLocation"))
                    InputStream is = newRr.openStream()

                    byte[] bytes = org.apache.commons.io.IOUtils.toByteArray(is);
                    int pictureIdx = wb.addPicture(bytes, HSSFWorkbook.PICTURE_TYPE_JPEG);
                    is.close();

                    CreationHelper helper = wb.getCreationHelper();
                    Drawing drawing = sheet.createDrawingPatriarch();
                    ClientAnchor anchor = helper.createClientAnchor();
                    anchor.setCol1(beginCol++);
                    anchor.setRow1(beginRow);
                    Picture pict = drawing.createPicture(anchor, pictureIdx);
                    pict.resize();
                }

                ByteArrayOutputStream bos = new ByteArrayOutputStream();
                wb.write(bos)
                resourceInputStream.close()
                ByteArrayInputStream bis = new ByteArrayInputStream(bos.toByteArray());

                String fileName = "Summary_" + viewServeLineStore.shortName + "_" + viewServeLineStore.storeName + "_" + viewServeLineStore.auditDate + "(" + serveLineStoreId + "_" +
                    (viewServeLineStore.checklistStatus==30?"Auditing":(viewServeLineStore.checklistStatus==35?"Reject":(viewServeLineStore.checklistStatus==40?"Audited":(viewServeLineStore.checklistStatus==50?"Reviewed":(viewServeLineStore.checklistStatus==60?"Finished":""))))) + ")" + ".xls"
                String attachmentType = "ServeLineStore-Summary"
                String attachmentLocation = "dbresource://afauditApp/attachment/${attachmentType}/${serveLineStoreId}/${fileName}"
                String attachmentUrl = ec.web.getWebappRootUrl(true, null) + "/apps/afauditApp/rest/attachment/${attachmentType}/${serveLineStoreId}/${fileName}"

                newRr = ec.resource.getLocationReference(attachmentLocation)
                newRr.putStream(bis)
                bos.close()
                bis.close()

                ec.service.sync().name("create", "afaudit.Attachment").parameters([attachmentType: attachmentType, dataId: serveLineStoreId, attachmentLocation: attachmentLocation, attachmentUrl: attachmentUrl]).call()
            ]]></script>
        </actions>
    </service>

    <service verb="get" noun="ReferenceIds">
        <in-parameters>
            <parameter name="customerId" required="true"/>
            <parameter name="category" required="true"/>
        </in-parameters>

        <actions>
            <entity-find-one entity-name="afaudit.Customer" value-field="customer">
                <field-map field-name="customerId" from="customerId"/>
            </entity-find-one>
            <entity-find-one entity-name="afaudit.Reference" value-field="reference">
                <field-map field-name="referenceId" from="customer.customerRefId"/>
            </entity-find-one>
            <entity-find entity-name="afaudit.Reference" list="referenceList">
                <econdition field-name="enterprise" from="reference.attribute"/>
                <econdition field-name="category" from="category"/>
            </entity-find>
            <set field="resultList" from="[]"/>
            <iterate list="referenceList" entry="reference">
                <script>
                    def referenceIdTemplate = reference.attribute + " | " + reference.attributeValue + " [" + reference.referenceId + "]"
                    resultList.add([referenceIdTemplate:referenceIdTemplate, referenceId:reference.referenceId])
                </script>
            </iterate>
            <script>ec.web.sendJsonResponse(resultList)</script>
        </actions>
    </service>

    <service verb="get" noun="StoreIds">
        <in-parameters>
            <parameter name="customerId" required="true"/>
        </in-parameters>

        <actions>
            <entity-find entity-name="afaudit.Store" list="storeList">
                <econdition field-name="customerId" from="customerId"/></entity-find>
            <set field="resultList" from="[]"/>
            <iterate list="storeList" entry="store">
                <script>
                    def storeIdTemplate = store.storeName + "|" + store.storeCode + " [" + store.storeId + "]"
                    resultList.add([storeIdTemplate:storeIdTemplate, storeId:store.storeId])
                </script>
            </iterate>
            <script>ec.web.sendJsonResponse(resultList)</script>
        </actions>
    </service>

    <service verb="get" noun="ChecklistIds">
        <in-parameters>
            <parameter name="customerId" required="true"/>
            <parameter name="serveId" required="false"/>
        </in-parameters>

        <actions>
            <if condition="!serveId">
                <entity-find entity-name="afaudit.ViewChecklist" list="checklistList">
                    <econdition field-name="customerId" from="customerId"/><econdition field-name="active" value="1"/>
                    <order-by field-name="-checklistVersion"/></entity-find>
                <set field="resultList" from="[]"/>
                <iterate list="checklistList" entry="checklist">
                    <script>
                        def checklistIdTemplate = checklist.shortName + " | " + checklist.attribute + " | " + checklist.attributeValue + " | " + checklist.checklistVersion + " [" + checklist.checklistId + "]"
                        resultList.add([checklistIdTemplate:checklistIdTemplate, checklistId:checklist.checklistId])
                    </script>
                </iterate>
            <else>
                <entity-find-one entity-name="afaudit.Serve" value-field="serve">
                    <field-map field-name="serveId" from="serveId"/></entity-find-one>
                <entity-find entity-name="afaudit.ViewChecklist" list="checklistList">
                    <econdition field-name="customerId" from="customerId"/>
                    <econdition field-name="serveTypeRefId" from="serve.serveTypeRefId"/><econdition field-name="active" value="1"/>
                    <order-by field-name="-checklistVersion"/></entity-find>
                <set field="resultList" from="[]"/>
                <script>
                    def checklistIdTemplate = checklistList.shortName[0] + " | " + checklistList.attribute[0] + " | " + checklistList.attributeValue[0] + " | " + checklistList.checklistVersion[0] + " [" + checklistList.checklistId[0] + "]"
                    resultList.add([checklistIdTemplate:checklistIdTemplate, checklistId:checklistList.checklistId[0]])
                </script>
            </else></if>

            <script>ec.web.sendJsonResponse(resultList)</script>
        </actions>
    </service>

    <service verb="get" noun="CheckItemIds">
        <in-parameters>
            <parameter name="customerId" required="true"/>
        </in-parameters>

        <actions>
            <entity-find entity-name="afaudit.ViewCheckItem" list="checkItemList">
                <econdition field-name="customerId" from="customerId"/></entity-find>
            <set field="resultList" from="[]"/>
            <iterate list="checkItemList" entry="checkItem">
                <script>
                    def checkItemIdTemplate = checkItem.checkGroup + " | " + checkItem.itemNo + " | " + (checkItem.checkPoint.length() > 25 ? checkItem.checkPoint.substring(0,25) + "...":checkItem.checkPoint) + " [" + checkItem.checkItemId + "]"
                    resultList.add([checkItemIdTemplate:checkItemIdTemplate, checkItemId:checkItem.checkItemId])
                </script>
            </iterate>
            <script>ec.web.sendJsonResponse(resultList)</script>
        </actions>
    </service>

    <service verb="get" noun="ServeIds">
        <in-parameters>
            <parameter name="customerId" required="true"/>
        </in-parameters>

        <actions>
            <entity-find entity-name="afaudit.ViewServe" list="serveList">
                <econdition field-name="customerId" from="customerId"/></entity-find>
            <set field="resultList" from="[]"/>
            <iterate list="serveList" entry="serve">
                <script>
                    def serveIdTemplate = serve.shortName + " | " + serve.serveNo + " [" + serve.serveId + "]"
                    resultList.add([serveIdTemplate:serveIdTemplate, serveId:serve.serveId])
                </script>
            </iterate>
            <script>ec.web.sendJsonResponse(resultList)</script>
        </actions>
    </service>

    <service verb="get" noun="ServeLineIds">
        <in-parameters>
            <parameter name="customerId" required="true"/>
            <parameter name="serveId" required="false"/>
        </in-parameters>

        <actions>
            <entity-find entity-name="afaudit.ViewServeLine" list="serveLineList">
                <econdition field-name="customerId" from="customerId"/>
                <econdition field-name="serveId" from="serveId" ignore-if-empty="true"/></entity-find>
            <set field="resultList" from="[]"/>
            <iterate list="serveLineList" entry="serveLine">
                <script>
                    def serveLineIdTemplate = serveLine.serveLineNo + " | " + serveLine.fromDate + " [" + serveLine.serveLineId + "]"
                    resultList.add([serveLineIdTemplate:serveLineIdTemplate, serveLineId:serveLine.serveLineId])
                </script>
            </iterate>
            <script>ec.web.sendJsonResponse(resultList)</script>
        </actions>
    </service>

    <service verb="get" noun="ServeLineStoreIds">
        <in-parameters>
            <parameter name="storeId" required="true"/>
        </in-parameters>

        <actions>
            <entity-find entity-name="afaudit.ViewServeLineStore" list="serveLineStoreList">
                <econdition field-name="storeId" from="storeId"/></entity-find>
            <set field="resultList" from="[]"/>
            <iterate list="serveLineStoreList" entry="serveLineStore">
                <script>
                    def serveLineStoreIdTemplate = serveLineStore.serveLineNo + " | " + serveLineStore.storeName + " [" + serveLineStore.serveLineStoreId + "]"
                    resultList.add([serveLineStoreIdTemplate:serveLineStoreIdTemplate, serveLineStoreId:serveLineStore.serveLineStoreId])
                </script>
            </iterate>
            <script>ec.web.sendJsonResponse(resultList)</script>
        </actions>
    </service>
</services>
